{"ast":null,"code":"import * as THREE from 'three';\nimport alphaTexture from '../../../assets/textures/stripes_gradient.jpg';\nexport default (function (scene, geo) {\n  var group = new THREE.Group(); // const subjectGeometry = deformGeometry(geo);\n\n  var subjectGeometry = geo;\n  var subjectMaterial = new THREE.MeshStandardMaterial({\n    color: \"#000\",\n    transparent: true,\n    side: THREE.DoubleSide,\n    alphaTest: 0.5\n  });\n  subjectMaterial.alphaMap = new THREE.TextureLoader().load(alphaTexture);\n  subjectMaterial.alphaMap.magFilter = THREE.NearestFilter;\n  subjectMaterial.alphaMap.wrapT = THREE.RepeatWrapping;\n  subjectMaterial.alphaMap.repeat.y = 1;\n  var subjectMesh = new THREE.Mesh(subjectGeometry, subjectMaterial);\n  var subjectWireframe = new THREE.LineSegments(new THREE.EdgesGeometry(subjectGeometry), new THREE.LineBasicMaterial());\n  group.add(subjectMesh);\n  group.add(subjectWireframe);\n  scene.add(group);\n  group.rotation.z = 6 * Math.PI;\n  var speed = 0.02;\n  var textureOffsetSpeed = 0.02; // function deformGeometry(geometry) {\n  //     for (let i=0; i<geometry.vertices.length; i+=2) {\n  //         const scalar = 1 + Math.random()*0.8;\n  //         geometry.vertices[i].multiplyScalar(scalar)\n  //     }\n  //     return geometry;\n  // }\n\n  function update(time) {\n    var angle = time * speed;\n    group.rotation.y = angle;\n    subjectMaterial.alphaMap.offset.y = 0.55 + time * textureOffsetSpeed;\n    subjectWireframe.material.color.setHSL(Math.sin(angle * 2), 0.5, 0.5);\n    var scale = (Math.sin(angle * 8) + 6.4) / 5;\n    subjectWireframe.scale.set(scale, scale, scale);\n  }\n\n  return {\n    update: update\n  };\n});","map":{"version":3,"sources":["/var/www/html/sergio usle_webDeveloper/src/components/canvas/threejs/SceneSubject.js"],"names":["THREE","alphaTexture","scene","geo","group","Group","subjectGeometry","subjectMaterial","MeshStandardMaterial","color","transparent","side","DoubleSide","alphaTest","alphaMap","TextureLoader","load","magFilter","NearestFilter","wrapT","RepeatWrapping","repeat","y","subjectMesh","Mesh","subjectWireframe","LineSegments","EdgesGeometry","LineBasicMaterial","add","rotation","z","Math","PI","speed","textureOffsetSpeed","update","time","angle","offset","material","setHSL","sin","scale","set"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,YAAP,MAAyB,+CAAzB;AAKA,gBAAe,UAACC,KAAD,EAAOC,GAAP,EAAe;AAC1B,MAAMC,KAAK,GAAG,IAAIJ,KAAK,CAACK,KAAV,EAAd,CAD0B,CAG1B;;AACA,MAAMC,eAAe,GAAGH,GAAxB;AACA,MAAMI,eAAe,GAAG,IAAIP,KAAK,CAACQ,oBAAV,CAA+B;AAAEC,IAAAA,KAAK,EAAE,MAAT;AAAiBC,IAAAA,WAAW,EAAE,IAA9B;AAAoCC,IAAAA,IAAI,EAAEX,KAAK,CAACY,UAAhD;AAA4DC,IAAAA,SAAS,EAAE;AAAvE,GAA/B,CAAxB;AACAN,EAAAA,eAAe,CAACO,QAAhB,GAA2B,IAAId,KAAK,CAACe,aAAV,GAA0BC,IAA1B,CAA+Bf,YAA/B,CAA3B;AACAM,EAAAA,eAAe,CAACO,QAAhB,CAAyBG,SAAzB,GAAqCjB,KAAK,CAACkB,aAA3C;AACAX,EAAAA,eAAe,CAACO,QAAhB,CAAyBK,KAAzB,GAAiCnB,KAAK,CAACoB,cAAvC;AACAb,EAAAA,eAAe,CAACO,QAAhB,CAAyBO,MAAzB,CAAgCC,CAAhC,GAAoC,CAApC;AAEA,MAAMC,WAAW,GAAG,IAAIvB,KAAK,CAACwB,IAAV,CAAelB,eAAf,EAAgCC,eAAhC,CAApB;AAEA,MAAMkB,gBAAgB,GAAG,IAAIzB,KAAK,CAAC0B,YAAV,CACrB,IAAI1B,KAAK,CAAC2B,aAAV,CAAwBrB,eAAxB,CADqB,EAErB,IAAIN,KAAK,CAAC4B,iBAAV,EAFqB,CAAzB;AAKAxB,EAAAA,KAAK,CAACyB,GAAN,CAAUN,WAAV;AACAnB,EAAAA,KAAK,CAACyB,GAAN,CAAUJ,gBAAV;AACAvB,EAAAA,KAAK,CAAC2B,GAAN,CAAUzB,KAAV;AAEAA,EAAAA,KAAK,CAAC0B,QAAN,CAAeC,CAAf,GAAmB,IAAEC,IAAI,CAACC,EAA1B;AAEA,MAAMC,KAAK,GAAG,IAAd;AACA,MAAMC,kBAAkB,GAAG,IAA3B,CAzB0B,CA2B1B;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA,WAASC,MAAT,CAAgBC,IAAhB,EAAsB;AAClB,QAAMC,KAAK,GAAGD,IAAI,GAACH,KAAnB;AAEA9B,IAAAA,KAAK,CAAC0B,QAAN,CAAeR,CAAf,GAAmBgB,KAAnB;AAEA/B,IAAAA,eAAe,CAACO,QAAhB,CAAyByB,MAAzB,CAAgCjB,CAAhC,GAAoC,OAAOe,IAAI,GAAGF,kBAAlD;AAEAV,IAAAA,gBAAgB,CAACe,QAAjB,CAA0B/B,KAA1B,CAAgCgC,MAAhC,CAAwCT,IAAI,CAACU,GAAL,CAASJ,KAAK,GAAC,CAAf,CAAxC,EAA2D,GAA3D,EAAgE,GAAhE;AAEA,QAAMK,KAAK,GAAG,CAACX,IAAI,CAACU,GAAL,CAASJ,KAAK,GAAC,CAAf,IAAkB,GAAnB,IAAwB,CAAtC;AACAb,IAAAA,gBAAgB,CAACkB,KAAjB,CAAuBC,GAAvB,CAA2BD,KAA3B,EAAkCA,KAAlC,EAAyCA,KAAzC;AACH;;AAED,SAAO;AACHP,IAAAA,MAAM,EAANA;AADG,GAAP;AAGH,CApDD","sourcesContent":["import * as THREE from 'three'\nimport alphaTexture from '../../../assets/textures/stripes_gradient.jpg';\n\n\n\n\nexport default (scene,geo) => {    \n    const group = new THREE.Group();\n\n    // const subjectGeometry = deformGeometry(geo);\n    const subjectGeometry = geo;\n    const subjectMaterial = new THREE.MeshStandardMaterial({ color: \"#000\", transparent: true, side: THREE.DoubleSide, alphaTest: 0.5 });\n    subjectMaterial.alphaMap = new THREE.TextureLoader().load(alphaTexture);\n    subjectMaterial.alphaMap.magFilter = THREE.NearestFilter;\n    subjectMaterial.alphaMap.wrapT = THREE.RepeatWrapping;\n    subjectMaterial.alphaMap.repeat.y = 1;\n\n    const subjectMesh = new THREE.Mesh(subjectGeometry, subjectMaterial);\n        \n    const subjectWireframe = new THREE.LineSegments(\n        new THREE.EdgesGeometry(subjectGeometry),\n        new THREE.LineBasicMaterial()\n    );\n\n    group.add(subjectMesh);\n    group.add(subjectWireframe);\n    scene.add(group);\n\n    group.rotation.z = 6*Math.PI;\n\n    const speed = 0.02;\n    const textureOffsetSpeed = 0.02;\n\n    // function deformGeometry(geometry) {\n    //     for (let i=0; i<geometry.vertices.length; i+=2) {\n    //         const scalar = 1 + Math.random()*0.8;\n    //         geometry.vertices[i].multiplyScalar(scalar)\n    //     }\n\n    //     return geometry;\n    // }\n\n    function update(time) {\n        const angle = time*speed;\n\n        group.rotation.y = angle;\n\n        subjectMaterial.alphaMap.offset.y = 0.55 + time * textureOffsetSpeed;\n\n        subjectWireframe.material.color.setHSL( Math.sin(angle*2), 0.5, 0.5 );\n        \n        const scale = (Math.sin(angle*8)+6.4)/5;\n        subjectWireframe.scale.set(scale, scale, scale)\n    }\n\n    return {\n        update\n    }\n}"]},"metadata":{},"sourceType":"module"}