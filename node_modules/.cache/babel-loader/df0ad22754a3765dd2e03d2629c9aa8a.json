{"ast":null,"code":"var _this = this;\n\nimport SceneManager from './SceneManager';\nimport * as OBJLoader from \"three-obj-loader\";\nimport * as THREE from \"three\";\nimport model from \"../../assets/models/dummy.obj\";\nOBJLoader(THREE);\nthis.THREE = THREE;\nthis.loader = new this.THREE.OBJLoader();\n\nthis.loadGeo = function () {\n  _this.loader.load( // resource URL\n  model, // called when resource is loaded\n  function (object) {\n    console.log(object);\n\n    _this.setState({\n      resource: object\n    });\n  }, // called when loading is in progresses\n  function (xhr) {\n    console.log(xhr.loaded / xhr.total * 100 + \"% loaded\");\n  }, // called when loading has errors\n  function (error) {\n    console.log(\"An error happened\");\n  });\n};\n\nexport default (function (container, geo) {\n  var canvas = createCanvas(document, container);\n  var sceneManager = new SceneManager(canvas, geo);\n  var canvasHalfWidth;\n  var canvasHalfHeight;\n  bindEventListeners();\n  render();\n\n  function createCanvas(document, container) {\n    var canvas = document.createElement('canvas');\n    container.appendChild(canvas);\n    return canvas;\n  }\n\n  function bindEventListeners() {\n    window.onresize = resizeCanvas;\n    window.onmousemove = mouseMove;\n    resizeCanvas();\n  }\n\n  function resizeCanvas() {\n    canvas.style.width = '100%';\n    canvas.style.height = '100%';\n    canvas.width = canvas.offsetWidth;\n    canvas.height = canvas.offsetHeight;\n    canvasHalfWidth = Math.round(canvas.offsetWidth / 2);\n    canvasHalfHeight = Math.round(canvas.offsetHeight / 2);\n    sceneManager.onWindowResize();\n  }\n\n  function mouseMove(_ref) {\n    var screenX = _ref.screenX,\n        screenY = _ref.screenY;\n    sceneManager.onMouseMove(screenX - canvasHalfWidth, screenY - canvasHalfHeight);\n  }\n\n  function render(time) {\n    requestAnimationFrame(render);\n    sceneManager.update();\n  }\n});","map":{"version":3,"sources":["/var/www/html/learning-react/react-threeJS/src/components/canvas/threejs/threeEntryPoint.js"],"names":["SceneManager","OBJLoader","THREE","model","loader","loadGeo","load","object","console","log","setState","resource","xhr","loaded","total","error","container","geo","canvas","createCanvas","document","sceneManager","canvasHalfWidth","canvasHalfHeight","bindEventListeners","render","createElement","appendChild","window","onresize","resizeCanvas","onmousemove","mouseMove","style","width","height","offsetWidth","offsetHeight","Math","round","onWindowResize","screenX","screenY","onMouseMove","time","requestAnimationFrame","update"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,OAAO,KAAKC,SAAZ,MAA2B,kBAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,+BAAlB;AACAF,SAAS,CAACC,KAAD,CAAT;AACI,KAAKA,KAAL,GAAaA,KAAb;AACA,KAAKE,MAAL,GAAc,IAAI,KAAKF,KAAL,CAAWD,SAAf,EAAd;;AACA,KAAKI,OAAL,GAAe,YAAM;AACnB,EAAA,KAAI,CAACD,MAAL,CAAYE,IAAZ,EACE;AACAH,EAAAA,KAFF,EAGE;AACA,YAAAI,MAAM,EAAI;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACA,IAAA,KAAI,CAACG,QAAL,CAAc;AAAEC,MAAAA,QAAQ,EAAEJ;AAAZ,KAAd;AACD,GAPH,EAQE;AACA,YAAAK,GAAG,EAAI;AACLJ,IAAAA,OAAO,CAACC,GAAR,CAAaG,GAAG,CAACC,MAAJ,GAAaD,GAAG,CAACE,KAAlB,GAA2B,GAA3B,GAAiC,UAA7C;AACD,GAXH,EAYE;AACA,YAAAC,KAAK,EAAI;AACPP,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD,GAfH;AAiBD,CAlBD;;AAoBJ,gBAAe,UAACO,SAAD,EAAYC,GAAZ,EAAoB;AAE/B,MAAMC,MAAM,GAAGC,YAAY,CAACC,QAAD,EAAWJ,SAAX,CAA3B;AACA,MAAMK,YAAY,GAAG,IAAIrB,YAAJ,CAAiBkB,MAAjB,EAAyBD,GAAzB,CAArB;AAEA,MAAIK,eAAJ;AACA,MAAIC,gBAAJ;AAEAC,EAAAA,kBAAkB;AAClBC,EAAAA,MAAM;;AAEN,WAASN,YAAT,CAAsBC,QAAtB,EAAgCJ,SAAhC,EAA2C;AACvC,QAAME,MAAM,GAAGE,QAAQ,CAACM,aAAT,CAAuB,QAAvB,CAAf;AACAV,IAAAA,SAAS,CAACW,WAAV,CAAsBT,MAAtB;AACA,WAAOA,MAAP;AACH;;AAED,WAASM,kBAAT,GAA8B;AAC1BI,IAAAA,MAAM,CAACC,QAAP,GAAkBC,YAAlB;AACAF,IAAAA,MAAM,CAACG,WAAP,GAAqBC,SAArB;AACAF,IAAAA,YAAY;AACf;;AAED,WAASA,YAAT,GAAwB;AACpBZ,IAAAA,MAAM,CAACe,KAAP,CAAaC,KAAb,GAAqB,MAArB;AACAhB,IAAAA,MAAM,CAACe,KAAP,CAAaE,MAAb,GAAqB,MAArB;AAEAjB,IAAAA,MAAM,CAACgB,KAAP,GAAgBhB,MAAM,CAACkB,WAAvB;AACAlB,IAAAA,MAAM,CAACiB,MAAP,GAAgBjB,MAAM,CAACmB,YAAvB;AAEAf,IAAAA,eAAe,GAAGgB,IAAI,CAACC,KAAL,CAAWrB,MAAM,CAACkB,WAAP,GAAmB,CAA9B,CAAlB;AACAb,IAAAA,gBAAgB,GAAGe,IAAI,CAACC,KAAL,CAAWrB,MAAM,CAACmB,YAAP,GAAoB,CAA/B,CAAnB;AAEAhB,IAAAA,YAAY,CAACmB,cAAb;AACH;;AAED,WAASR,SAAT,OAAuC;AAAA,QAAnBS,OAAmB,QAAnBA,OAAmB;AAAA,QAAVC,OAAU,QAAVA,OAAU;AACnCrB,IAAAA,YAAY,CAACsB,WAAb,CAAyBF,OAAO,GAACnB,eAAjC,EAAkDoB,OAAO,GAACnB,gBAA1D;AACH;;AAED,WAASE,MAAT,CAAgBmB,IAAhB,EAAsB;AAClBC,IAAAA,qBAAqB,CAACpB,MAAD,CAArB;AACAJ,IAAAA,YAAY,CAACyB,MAAb;AACH;AACJ,CA5CD","sourcesContent":["import SceneManager from './SceneManager';\nimport * as OBJLoader from \"three-obj-loader\";\nimport * as THREE from \"three\";\nimport model from \"../../assets/models/dummy.obj\";\nOBJLoader(THREE);\n    this.THREE = THREE;\n    this.loader = new this.THREE.OBJLoader();\n    this.loadGeo = () => {\n      this.loader.load(\n        // resource URL\n        model,\n        // called when resource is loaded\n        object => {\n          console.log(object);\n          this.setState({ resource: object });\n        },\n        // called when loading is in progresses\n        xhr => {\n          console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\");\n        },\n        // called when loading has errors\n        error => {\n          console.log(\"An error happened\");\n        }\n      );\n    };\n\nexport default (container, geo) => {\n\n    const canvas = createCanvas(document, container);\n    const sceneManager = new SceneManager(canvas, geo);\n\n    let canvasHalfWidth;\n    let canvasHalfHeight;\n\n    bindEventListeners();\n    render();\n\n    function createCanvas(document, container) {\n        const canvas = document.createElement('canvas');     \n        container.appendChild(canvas);\n        return canvas;\n    }\n\n    function bindEventListeners() {\n        window.onresize = resizeCanvas;\n        window.onmousemove = mouseMove;\n        resizeCanvas();\t\n    }\n\n    function resizeCanvas() {        \n        canvas.style.width = '100%';\n        canvas.style.height= '100%';\n        \n        canvas.width  = canvas.offsetWidth;\n        canvas.height = canvas.offsetHeight;\n\n        canvasHalfWidth = Math.round(canvas.offsetWidth/2);\n        canvasHalfHeight = Math.round(canvas.offsetHeight/2);\n\n        sceneManager.onWindowResize()\n    }\n\n    function mouseMove({screenX, screenY}) {\n        sceneManager.onMouseMove(screenX-canvasHalfWidth, screenY-canvasHalfHeight);\n    }\n\n    function render(time) {\n        requestAnimationFrame(render);\n        sceneManager.update();\n    }\n}"]},"metadata":{},"sourceType":"module"}