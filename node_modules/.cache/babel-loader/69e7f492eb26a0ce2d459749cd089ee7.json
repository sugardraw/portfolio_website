{"ast":null,"code":"import * as THREE from \"three\";\nimport alphaTexture from \"../../../assets/textures/stripes_gradient.jpg\";\nimport * as OBJLoader from \"three-obj-loader\";\nimport model from \"../../../assets/models/dummy.obj\";\nOBJLoader(THREE);\nvar loader = new THREE.OBJLoader();\n\nvar loadObj = function loadObj() {\n  loader.load( // resource URL\n  model, // called when resource is loaded\n  function (object) {\n    console.log(object);\n    group.add(object);\n  }, // called when loading is in progresses\n  function (xhr) {\n    console.log(xhr.loaded / xhr.total * 100 + \"% loaded\");\n  }, // called when loading has errors\n  function (error) {\n    console.log(\"An error happened\");\n  });\n};\n\nexport default (function (scene, geo, model) {\n  var group = new THREE.Group(); // const subjectGeometry = deformGeometry(geo);\n\n  var subjectGeometry = geo;\n  var subjectMaterial = new THREE.MeshStandardMaterial({\n    color: \"#000\",\n    transparent: true,\n    side: THREE.DoubleSide,\n    alphaTest: 0.5\n  });\n  subjectMaterial.alphaMap = new THREE.TextureLoader().load(alphaTexture);\n  subjectMaterial.alphaMap.magFilter = THREE.NearestFilter;\n  subjectMaterial.alphaMap.wrapT = THREE.RepeatWrapping;\n  subjectMaterial.alphaMap.repeat.y = 1;\n  var subjectMesh = new THREE.Mesh(subjectGeometry, subjectMaterial);\n  var subjectWireframe = new THREE.LineSegments(new THREE.EdgesGeometry(subjectGeometry), new THREE.LineBasicMaterial()); //upload a model\n\n  group.add(subjectMesh);\n  group.add(subjectWireframe);\n  scene.add(group);\n  group.rotation.z = 6 * Math.PI;\n  var speed = 0.02;\n  var textureOffsetSpeed = 0.02; // function deformGeometry(geometry) {\n  //     for (let i=0; i<geometry.vertices.length; i+=2) {\n  //         const scalar = 1 + Math.random()*0.8;\n  //         geometry.vertices[i].multiplyScalar(scalar)\n  //     }\n  //     return geometry;\n  // }\n\n  function update(time) {\n    var angle = time * speed;\n    group.rotation.y = angle;\n    subjectMaterial.alphaMap.offset.y = 0.55 + time * textureOffsetSpeed;\n    subjectWireframe.material.color.setHSL(Math.sin(angle * 2), 0.5, 0.5);\n    var scale = (Math.sin(angle * 8) + 6.4) / 5;\n    subjectWireframe.scale.set(scale, scale, scale);\n  }\n\n  return {\n    update: update\n  };\n});","map":{"version":3,"sources":["/var/www/html/learning-react/react-threeJS/src/components/canvas/threejs/SceneSubject.js"],"names":["THREE","alphaTexture","OBJLoader","model","loader","loadObj","load","object","console","log","group","add","xhr","loaded","total","error","scene","geo","Group","subjectGeometry","subjectMaterial","MeshStandardMaterial","color","transparent","side","DoubleSide","alphaTest","alphaMap","TextureLoader","magFilter","NearestFilter","wrapT","RepeatWrapping","repeat","y","subjectMesh","Mesh","subjectWireframe","LineSegments","EdgesGeometry","LineBasicMaterial","rotation","z","Math","PI","speed","textureOffsetSpeed","update","time","angle","offset","material","setHSL","sin","scale","set"],"mappings":"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","sourcesContent":["import * as THREE from \"three\";\nimport alphaTexture from \"../../../assets/textures/stripes_gradient.jpg\";\n\nimport * as OBJLoader from \"three-obj-loader\";\nimport model from \"../../../assets/models/dummy.obj\";\n\n\nOBJLoader(THREE);\n\nconst loader = new THREE.OBJLoader();\n\n\nconst loadObj = () => {\n loader.load(\n    // resource URL\n    model,\n    // called when resource is loaded\n    object => {\n      console.log(object);\n      group.add(object)\n    },\n    // called when loading is in progresses\n    xhr => {\n      console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\");\n    },\n    // called when loading has errors\n    error => {\n      console.log(\"An error happened\");\n    }\n  );\n};\n\nexport default (scene, geo, model) => {\n  const group = new THREE.Group();\n\n  // const subjectGeometry = deformGeometry(geo);\n  const subjectGeometry = geo;\n  const subjectMaterial = new THREE.MeshStandardMaterial({\n    color: \"#000\",\n    transparent: true,\n    side: THREE.DoubleSide,\n    alphaTest: 0.5\n  });\n  subjectMaterial.alphaMap = new THREE.TextureLoader().load(alphaTexture);\n  subjectMaterial.alphaMap.magFilter = THREE.NearestFilter;\n  subjectMaterial.alphaMap.wrapT = THREE.RepeatWrapping;\n  subjectMaterial.alphaMap.repeat.y = 1;\n\n  const subjectMesh = new THREE.Mesh(subjectGeometry, subjectMaterial);\n\n  const subjectWireframe = new THREE.LineSegments(\n    new THREE.EdgesGeometry(subjectGeometry),\n    new THREE.LineBasicMaterial()\n  );\n\n  //upload a model\n\n  group.add(subjectMesh);\n  group.add(subjectWireframe);\n  scene.add(group);\n\n  group.rotation.z = 6 * Math.PI;\n\n  const speed = 0.02;\n  const textureOffsetSpeed = 0.02;\n\n  // function deformGeometry(geometry) {\n  //     for (let i=0; i<geometry.vertices.length; i+=2) {\n  //         const scalar = 1 + Math.random()*0.8;\n  //         geometry.vertices[i].multiplyScalar(scalar)\n  //     }\n\n  //     return geometry;\n  // }\n\n  function update(time) {\n    const angle = time * speed;\n\n    group.rotation.y = angle;\n\n    subjectMaterial.alphaMap.offset.y = 0.55 + time * textureOffsetSpeed;\n\n    subjectWireframe.material.color.setHSL(Math.sin(angle * 2), 0.5, 0.5);\n\n    const scale = (Math.sin(angle * 8) + 6.4) / 5;\n    subjectWireframe.scale.set(scale, scale, scale);\n  }\n\n  return {\n    update\n  };\n};\n"]},"metadata":{},"sourceType":"module"}