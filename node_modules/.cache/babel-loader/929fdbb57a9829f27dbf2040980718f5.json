{"ast":null,"code":"import * as THREE from 'three';\nimport SceneSubject from './SceneSubject';\nimport GeneralLights from './GeneralLights';\nexport default (function (canvas) {\n  var clock = new THREE.Clock();\n  var origin = new THREE.Vector3(0, 0, 0);\n  var screenDimensions = {\n    width: canvas.width,\n    height: canvas.height\n  };\n  var mousePosition = {\n    x: 0,\n    y: 0\n  };\n  var subjectGeometry0 = new THREE.PlaneGeometry(50, 50);\n  var subjectGeometry1 = new THREE.BoxGeometry(50, 50);\n  var subjectGeometry2 = new THREE.SphereGeometry(50, 50, 50);\n  var subjectGeometry3 = new THREE.BoxGeometry(50, 50);\n  var scene = buildScene();\n  var renderer = buildRender(screenDimensions);\n  var camera = buildCamera(screenDimensions);\n  var sceneSubjects = createSceneSubjects(scene, subjectGeometry0);\n\n  function buildScene() {\n    var scene = new THREE.Scene();\n    scene.background = new THREE.Color(\"#FFF\");\n    return scene;\n  }\n\n  function buildRender(_ref) {\n    var width = _ref.width,\n        height = _ref.height;\n    var renderer = new THREE.WebGLRenderer({\n      canvas: canvas,\n      antialias: true,\n      alpha: true\n    });\n    var DPR = window.devicePixelRatio ? window.devicePixelRatio : 1;\n    renderer.setPixelRatio(DPR);\n    renderer.setSize(width, height);\n    renderer.gammaInput = true;\n    renderer.gammaOutput = true;\n    return renderer;\n  }\n\n  function buildCamera(_ref2) {\n    var width = _ref2.width,\n        height = _ref2.height;\n    var aspectRatio = width / height;\n    var fieldOfView = 60;\n    var nearPlane = 4;\n    var farPlane = 100;\n    var camera = new THREE.PerspectiveCamera(fieldOfView, aspectRatio, nearPlane, farPlane);\n    camera.position.z = 40;\n    return camera;\n  }\n\n  function createSceneSubjects(scene) {\n    var sceneSubjects = [new GeneralLights(scene), new SceneSubject(scene)];\n    return sceneSubjects;\n  }\n\n  function update() {\n    var elapsedTime = clock.getElapsedTime();\n\n    for (var i = 0; i < sceneSubjects.length; i++) {\n      sceneSubjects[i].update(elapsedTime);\n    }\n\n    updateCameraPositionRelativeToMouse();\n    renderer.render(scene, camera);\n  }\n\n  function updateCameraPositionRelativeToMouse() {\n    camera.position.x += (mousePosition.x * 0.01 - camera.position.x) * 0.01;\n    camera.position.y += (-(mousePosition.y * 0.01) - camera.position.y) * 0.01;\n    camera.lookAt(origin);\n  }\n\n  function onWindowResize() {\n    var width = canvas.width,\n        height = canvas.height;\n    screenDimensions.width = width;\n    screenDimensions.height = height;\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n    renderer.setSize(width, height);\n  }\n\n  function onMouseMove(x, y) {\n    mousePosition.x = x;\n    mousePosition.y = y;\n  }\n\n  return {\n    update: update,\n    onWindowResize: onWindowResize,\n    onMouseMove: onMouseMove\n  };\n});","map":{"version":3,"sources":["/var/www/html/learning-react/react-threeJS/src/components/header/threejs/SceneManager.js"],"names":["THREE","SceneSubject","GeneralLights","canvas","clock","Clock","origin","Vector3","screenDimensions","width","height","mousePosition","x","y","subjectGeometry0","PlaneGeometry","subjectGeometry1","BoxGeometry","subjectGeometry2","SphereGeometry","subjectGeometry3","scene","buildScene","renderer","buildRender","camera","buildCamera","sceneSubjects","createSceneSubjects","Scene","background","Color","WebGLRenderer","antialias","alpha","DPR","window","devicePixelRatio","setPixelRatio","setSize","gammaInput","gammaOutput","aspectRatio","fieldOfView","nearPlane","farPlane","PerspectiveCamera","position","z","update","elapsedTime","getElapsedTime","i","length","updateCameraPositionRelativeToMouse","render","lookAt","onWindowResize","aspect","updateProjectionMatrix","onMouseMove"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport SceneSubject from './SceneSubject';\nimport GeneralLights from './GeneralLights';\n\nexport default canvas => {\n\n    const clock = new THREE.Clock();\n    const origin = new THREE.Vector3(0,0,0);\n\n    const screenDimensions = {\n        width: canvas.width,\n        height: canvas.height\n    }\n\n    const mousePosition = {\n        x: 0,\n        y: 0\n    }\n\n\nconst subjectGeometry0 = new THREE.PlaneGeometry(50,50);\nconst subjectGeometry1 = new THREE.BoxGeometry(50,50);\nconst subjectGeometry2 = new THREE.SphereGeometry(50,50, 50);\nconst subjectGeometry3 = new THREE.BoxGeometry(50,50);\n\n    const scene = buildScene();\n    const renderer = buildRender(screenDimensions);\n    const camera = buildCamera(screenDimensions);\n    const sceneSubjects = createSceneSubjects(scene, subjectGeometry0);\n\n    function buildScene() {\n        const scene = new THREE.Scene();\n        scene.background = new THREE.Color(\"#FFF\");\n\n        return scene;\n    }\n\n    function buildRender({ width, height }) {\n        const renderer = new THREE.WebGLRenderer({ canvas: canvas, antialias: true, alpha: true }); \n        const DPR = window.devicePixelRatio ? window.devicePixelRatio : 1;\n        renderer.setPixelRatio(DPR);\n        renderer.setSize(width, height);\n\n        renderer.gammaInput = true;\n        renderer.gammaOutput = true; \n\n        return renderer;\n    }\n\n    function buildCamera({ width, height }) {\n        const aspectRatio = width / height;\n        const fieldOfView = 60;\n        const nearPlane = 4;\n        const farPlane = 100; \n        const camera = new THREE.PerspectiveCamera(fieldOfView, aspectRatio, nearPlane, farPlane);\n\n        camera.position.z = 40;\n\n        return camera;\n    }\n\n    function createSceneSubjects(scene) {\n        const sceneSubjects = [\n            new GeneralLights(scene),\n            new SceneSubject(scene)\n        ];\n\n        return sceneSubjects;\n    }\n\n    function update() {\n        const elapsedTime = clock.getElapsedTime();\n\n        for(let i=0; i<sceneSubjects.length; i++)\n            sceneSubjects[i].update(elapsedTime);\n\n        updateCameraPositionRelativeToMouse();\n\n        renderer.render(scene, camera);\n    }\n\n    function updateCameraPositionRelativeToMouse() {\n        camera.position.x += (  (mousePosition.x * 0.01) - camera.position.x ) * 0.01;\n        camera.position.y += ( -(mousePosition.y * 0.01) - camera.position.y ) * 0.01;\n        camera.lookAt(origin);\n    }\n\n    function onWindowResize() {\n        const { width, height } = canvas;\n        \n        screenDimensions.width = width;\n        screenDimensions.height = height;\n\n        camera.aspect = width / height;\n        camera.updateProjectionMatrix();\n        \n        renderer.setSize(width, height);\n    }\n\n    function onMouseMove(x, y) {\n        mousePosition.x = x;\n        mousePosition.y = y;\n    }\n\n    return {\n        update,\n        onWindowResize,\n        onMouseMove\n    }\n}"]},"metadata":{},"sourceType":"module"}