{"ast":null,"code":"import _classCallCheck from \"/var/www/html/learning-react/react-threeJS/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/var/www/html/learning-react/react-threeJS/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/var/www/html/learning-react/react-threeJS/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/var/www/html/learning-react/react-threeJS/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/var/www/html/learning-react/react-threeJS/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/var/www/html/learning-react/react-threeJS/src/components/canvas/CanvasObj.js\";\nimport React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport * as OBJLoader from \"three-obj-loader\";\nimport model from \"../../assets/models/dummy.obj\";\nOBJLoader(THREE);\n\nvar CanvasObj =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CanvasObj, _Component);\n\n  function CanvasObj() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CanvasObj);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CanvasObj)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.start = function () {\n      if (!_this.frameId) {\n        _this.frameId = requestAnimationFrame(_this.animate);\n      }\n    };\n\n    _this.stop = function () {\n      cancelAnimationFrame(_this.frameId);\n    };\n\n    _this.loadGeo = function () {\n      _this.loader.load( // resource URL\n      model, // called when resource is loaded\n      function (object) {\n        console.log(object);\n      }, // called when loading is in progresses\n      function (xhr) {\n        console.log(xhr.loaded / xhr.total * 100 + \"% loaded\");\n      }, // called when loading has errors\n      function (error) {\n        console.log(\"An error happened\");\n      });\n    };\n\n    _this.animate = function () {\n      _this.cube.rotation.x += 0.01;\n      _this.cube.rotation.y += 0.01;\n\n      _this.renderScene();\n\n      _this.frameId = window.requestAnimationFrame(_this.animate);\n    };\n\n    _this.renderScene = function () {\n      _this.renderer.render(_this.scene, _this.camera);\n    };\n\n    return _this;\n  }\n\n  _createClass(CanvasObj, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var width = this.mount.clientWidth;\n      var height = this.mount.clientHeight; //ADD SCENE\n\n      this.scene = new THREE.Scene(); //ADD CAMERA\n\n      this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n      this.camera.position.z = 4;\n      this.scene.add(this.camera); //ADD LIGHT\n\n      this.light = new THREE.DirectionalLight(0xffffff);\n      this.light.position.z = 4;\n      this.light.position.x = 4;\n      this.scene.add(this.light); //load models\n\n      this.THREE = THREE;\n      this.loader = new this.THREE.OBJLoader();\n      this.loadGeo(); //ADD RENDERER\n\n      this.renderer = new THREE.WebGLRenderer({\n        antialias: true\n      });\n      this.renderer.setClearColor(\"#000000\");\n      this.renderer.setSize(width, height);\n      this.mount.appendChild(this.renderer.domElement); //ADD CUBE\n\n      var geometry = new THREE.BoxGeometry(1.3, 1.3, 1.3);\n      var material = new THREE.MeshLambertMaterial({\n        color: \"#88d200\",\n        wireframe: false\n      });\n      this.cube = new THREE.Mesh(geometry, material);\n      this.scene.add(this.cube);\n      this.start();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.stop();\n      this.mount.removeChild(this.renderer.domElement);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        style: {\n          width: \"80%\",\n          height: \"100vh\"\n        },\n        ref: function ref(mount) {\n          _this2.mount = mount;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return CanvasObj;\n}(Component);\n\nexport default CanvasObj;","map":{"version":3,"sources":["/var/www/html/learning-react/react-threeJS/src/components/canvas/CanvasObj.js"],"names":["React","Component","THREE","OBJLoader","model","CanvasObj","start","frameId","requestAnimationFrame","animate","stop","cancelAnimationFrame","loadGeo","loader","load","object","console","log","xhr","loaded","total","error","cube","rotation","x","y","renderScene","window","renderer","render","scene","camera","width","mount","clientWidth","height","clientHeight","Scene","PerspectiveCamera","position","z","add","light","DirectionalLight","WebGLRenderer","antialias","setClearColor","setSize","appendChild","domElement","geometry","BoxGeometry","material","MeshLambertMaterial","color","wireframe","Mesh","removeChild"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport * as OBJLoader from \"three-obj-loader\";\n\nimport model from \"../../assets/models/dummy.obj\";\n\nOBJLoader(THREE);\n\nclass CanvasObj extends Component {\n  componentDidMount() {\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight;\n    //ADD SCENE\n    this.scene = new THREE.Scene();\n    //ADD CAMERA\n    this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    this.camera.position.z = 4;\n\n    this.scene.add(this.camera);\n    //ADD LIGHT\n    this.light = new THREE.DirectionalLight(0xffffff);\n    this.light.position.z = 4;\n    this.light.position.x = 4;\n\n    this.scene.add(this.light);\n    //load models\n    this.THREE = THREE;\n    this.loader = new this.THREE.OBJLoader();\n\n    this.loadGeo();\n\n    //ADD RENDERER\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n    this.renderer.setClearColor(\"#000000\");\n    this.renderer.setSize(width, height);\n    this.mount.appendChild(this.renderer.domElement);\n    //ADD CUBE\n    const geometry = new THREE.BoxGeometry(1.3, 1.3, 1.3);\n    const material = new THREE.MeshLambertMaterial({\n      color: \"#88d200\",\n      wireframe: false\n    });\n    this.cube = new THREE.Mesh(geometry, material);\n    this.scene.add(this.cube);\n    this.start();\n  }\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  start = () => {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  };\n\n  stop = () => {\n    cancelAnimationFrame(this.frameId);\n  };\n\n  loadGeo = () => {\n    this.loader.load(\n      // resource URL\n      model,\n      // called when resource is loaded\n      object => {\n        console.log(object);\n      },\n      // called when loading is in progresses\n      xhr => {\n        console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\");\n      },\n      // called when loading has errors\n      error => {\n        console.log(\"An error happened\");\n      }\n    );\n  };\n\n  animate = () => {\n    this.cube.rotation.x += 0.01;\n    this.cube.rotation.y += 0.01;\n    this.renderScene();\n    this.frameId = window.requestAnimationFrame(this.animate);\n  };\n  renderScene = () => {\n    this.renderer.render(this.scene, this.camera);\n  };\n  render() {\n    return (\n      <div\n        style={{ width: \"80%\", height: \"100vh\" }}\n        ref={mount => {\n          this.mount = mount;\n        }}\n      />\n    );\n  }\n}\nexport default CanvasObj;\n"]},"metadata":{},"sourceType":"module"}