{"ast":null,"code":"import * as THREE from \"three\";\nimport SceneSubject from \"./SceneSubject\";\nimport GeneralLights from \"./GeneralLights\";\nexport default (function (canvas) {\n  var clock = new THREE.Clock();\n  var origin = new THREE.Vector3(0, 0, 0);\n  var screenDimensions = {\n    width: canvas.width,\n    height: canvas.height\n  };\n  var mousePosition = {\n    x: 0,\n    y: 0\n  };\n  var geo = new THREE.SphereGeometry(50, 50, 50);\n  var scene = buildScene();\n  var renderer = buildRender(screenDimensions);\n  var camera = buildCamera(screenDimensions);\n  var sceneSubjects = createSceneSubjects(scene, geo);\n\n  function buildScene() {\n    var scene = new THREE.Scene();\n    scene.background = new THREE.Color(\"#FFF\");\n    return scene;\n  }\n\n  function buildRender(_ref) {\n    var width = _ref.width,\n        height = _ref.height;\n    var renderer = new THREE.WebGLRenderer({\n      canvas: canvas,\n      antialias: true,\n      alpha: true\n    });\n    var DPR = window.devicePixelRatio ? window.devicePixelRatio : 1;\n    renderer.setPixelRatio(DPR);\n    renderer.setSize(width, height);\n    renderer.gammaInput = true;\n    renderer.gammaOutput = true;\n    return renderer;\n  }\n\n  function buildCamera(_ref2) {\n    var width = _ref2.width,\n        height = _ref2.height;\n    var aspectRatio = width / height;\n    var fieldOfView = 60;\n    var nearPlane = 4;\n    var farPlane = 100;\n    var camera = new THREE.PerspectiveCamera(fieldOfView, aspectRatio, nearPlane, farPlane);\n    camera.position.z = 40;\n    return camera;\n  }\n\n  function createSceneSubjects(scene) {\n    var sceneSubjects = [new GeneralLights(scene), new SceneSubject(scene, geo)];\n    return sceneSubjects;\n  }\n\n  function update() {\n    var elapsedTime = clock.getElapsedTime();\n\n    for (var i = 0; i < sceneSubjects.length; i++) {\n      sceneSubjects[i].update(elapsedTime);\n    }\n\n    updateCameraPositionRelativeToMouse();\n    renderer.render(scene, camera);\n  }\n\n  function updateCameraPositionRelativeToMouse() {\n    camera.position.x += (mousePosition.x * 0.01 - camera.position.x) * 0.01;\n    camera.position.y += (-(mousePosition.y * 0.01) - camera.position.y) * 0.01;\n    camera.lookAt(origin);\n  }\n\n  function onWindowResize() {\n    var width = canvas.width,\n        height = canvas.height;\n    screenDimensions.width = width;\n    screenDimensions.height = height;\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n    renderer.setSize(width, height);\n  }\n\n  function onMouseMove(x, y) {\n    mousePosition.x = x;\n    mousePosition.y = y;\n  }\n\n  return {\n    update: update,\n    onWindowResize: onWindowResize,\n    onMouseMove: onMouseMove\n  };\n});","map":{"version":3,"sources":["/var/www/html/learning-react/react-threeJS/src/components/header/threejs/SceneManager.js"],"names":["THREE","SceneSubject","GeneralLights","canvas","clock","Clock","origin","Vector3","screenDimensions","width","height","mousePosition","x","y","geo","SphereGeometry","scene","buildScene","renderer","buildRender","camera","buildCamera","sceneSubjects","createSceneSubjects","Scene","background","Color","WebGLRenderer","antialias","alpha","DPR","window","devicePixelRatio","setPixelRatio","setSize","gammaInput","gammaOutput","aspectRatio","fieldOfView","nearPlane","farPlane","PerspectiveCamera","position","z","update","elapsedTime","getElapsedTime","i","length","updateCameraPositionRelativeToMouse","render","lookAt","onWindowResize","aspect","updateProjectionMatrix","onMouseMove"],"mappings":"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","sourcesContent":["import * as THREE from \"three\";\nimport SceneSubject from \"./SceneSubject\";\nimport GeneralLights from \"./GeneralLights\";\n\n\n\n\nexport default canvas => {\n  const clock = new THREE.Clock();\n  const origin = new THREE.Vector3(0, 0, 0);\n\n  const screenDimensions = {\n    width: canvas.width,\n    height: canvas.height\n  };\n\n  const mousePosition = {\n    x: 0,\n    y: 0\n  };\n  const geo = new THREE.SphereGeometry(50, 50, 50);\n\n\n  const scene = buildScene();\n  const renderer = buildRender(screenDimensions);\n  const camera = buildCamera(screenDimensions);\n  const sceneSubjects = createSceneSubjects(scene, geo);\n\n  function buildScene() {\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(\"#FFF\");\n\n    return scene;\n  }\n\n  function buildRender({ width, height }) {\n    const renderer = new THREE.WebGLRenderer({\n      canvas: canvas,\n      antialias: true,\n      alpha: true\n    });\n    const DPR = window.devicePixelRatio ? window.devicePixelRatio : 1;\n    renderer.setPixelRatio(DPR);\n    renderer.setSize(width, height);\n\n    renderer.gammaInput = true;\n    renderer.gammaOutput = true;\n\n    return renderer;\n  }\n\n  function buildCamera({ width, height }) {\n    const aspectRatio = width / height;\n    const fieldOfView = 60;\n    const nearPlane = 4;\n    const farPlane = 100;\n    const camera = new THREE.PerspectiveCamera(\n      fieldOfView,\n      aspectRatio,\n      nearPlane,\n      farPlane\n    );\n\n    camera.position.z = 40;\n\n    return camera;\n  }\n\n  function createSceneSubjects(scene) {\n    const sceneSubjects = [new GeneralLights(scene), new SceneSubject(scene, geo)];\n\n    return sceneSubjects;\n  }\n\n  function update() {\n    const elapsedTime = clock.getElapsedTime();\n\n    for (let i = 0; i < sceneSubjects.length; i++)\n      sceneSubjects[i].update(elapsedTime);\n\n    updateCameraPositionRelativeToMouse();\n\n    renderer.render(scene, camera);\n  }\n\n  function updateCameraPositionRelativeToMouse() {\n    camera.position.x += (mousePosition.x * 0.01 - camera.position.x) * 0.01;\n    camera.position.y += (-(mousePosition.y * 0.01) - camera.position.y) * 0.01;\n    camera.lookAt(origin);\n  }\n\n  function onWindowResize() {\n    const { width, height } = canvas;\n\n    screenDimensions.width = width;\n    screenDimensions.height = height;\n\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n\n    renderer.setSize(width, height);\n  }\n\n  function onMouseMove(x, y) {\n    mousePosition.x = x;\n    mousePosition.y = y;\n  }\n\n  return {\n    update,\n    onWindowResize,\n    onMouseMove\n  };\n};\n"]},"metadata":{},"sourceType":"module"}